// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "src/Parser.fsy"



# 10 "src/Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | ID of (string)
  | NUM of (int)
  | EOF
  | AMP
  | COMMA
  | SEMICOLON of (int)
  | RPAR of (int)
  | LPAR
  | LBRA
  | RBRA
  | ASSIGN
  | LSQUA
  | RSQUA
  | PLUS
  | MINUS
  | STAR
  | DIVIDE
  | EQUAL
  | NOTEQ
  | LEQ
  | LESS
  | GEQ
  | GREATER
  | AND
  | OR
  | NOT
  | NUL
  | TRUE
  | FALSE
  | INT
  | BOOL
  | IF
  | ELSE
  | WHILE
  | RETURN
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_ID
    | TOKEN_NUM
    | TOKEN_EOF
    | TOKEN_AMP
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_RPAR
    | TOKEN_LPAR
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_ASSIGN
    | TOKEN_LSQUA
    | TOKEN_RSQUA
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_DIVIDE
    | TOKEN_EQUAL
    | TOKEN_NOTEQ
    | TOKEN_LEQ
    | TOKEN_LESS
    | TOKEN_GEQ
    | TOKEN_GREATER
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_NUL
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_INT
    | TOKEN_BOOL
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_RETURN
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_exp
    | NONTERM_ctype
    | NONTERM_ctypeid
    | NONTERM_stmts
    | NONTERM_stmt
    | NONTERM_elseopt
    | NONTERM_args
    | NONTERM_func
    | NONTERM_prog

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | ID _ -> 0 
  | NUM _ -> 1 
  | EOF  -> 2 
  | AMP  -> 3 
  | COMMA  -> 4 
  | SEMICOLON _ -> 5 
  | RPAR _ -> 6 
  | LPAR  -> 7 
  | LBRA  -> 8 
  | RBRA  -> 9 
  | ASSIGN  -> 10 
  | LSQUA  -> 11 
  | RSQUA  -> 12 
  | PLUS  -> 13 
  | MINUS  -> 14 
  | STAR  -> 15 
  | DIVIDE  -> 16 
  | EQUAL  -> 17 
  | NOTEQ  -> 18 
  | LEQ  -> 19 
  | LESS  -> 20 
  | GEQ  -> 21 
  | GREATER  -> 22 
  | AND  -> 23 
  | OR  -> 24 
  | NOT  -> 25 
  | NUL  -> 26 
  | TRUE  -> 27 
  | FALSE  -> 28 
  | INT  -> 29 
  | BOOL  -> 30 
  | IF  -> 31 
  | ELSE  -> 32 
  | WHILE  -> 33 
  | RETURN  -> 34 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_ID 
  | 1 -> TOKEN_NUM 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_AMP 
  | 4 -> TOKEN_COMMA 
  | 5 -> TOKEN_SEMICOLON 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_LPAR 
  | 8 -> TOKEN_LBRA 
  | 9 -> TOKEN_RBRA 
  | 10 -> TOKEN_ASSIGN 
  | 11 -> TOKEN_LSQUA 
  | 12 -> TOKEN_RSQUA 
  | 13 -> TOKEN_PLUS 
  | 14 -> TOKEN_MINUS 
  | 15 -> TOKEN_STAR 
  | 16 -> TOKEN_DIVIDE 
  | 17 -> TOKEN_EQUAL 
  | 18 -> TOKEN_NOTEQ 
  | 19 -> TOKEN_LEQ 
  | 20 -> TOKEN_LESS 
  | 21 -> TOKEN_GEQ 
  | 22 -> TOKEN_GREATER 
  | 23 -> TOKEN_AND 
  | 24 -> TOKEN_OR 
  | 25 -> TOKEN_NOT 
  | 26 -> TOKEN_NUL 
  | 27 -> TOKEN_TRUE 
  | 28 -> TOKEN_FALSE 
  | 29 -> TOKEN_INT 
  | 30 -> TOKEN_BOOL 
  | 31 -> TOKEN_IF 
  | 32 -> TOKEN_ELSE 
  | 33 -> TOKEN_WHILE 
  | 34 -> TOKEN_RETURN 
  | 37 -> TOKEN_end_of_input
  | 35 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprog 
    | 1 -> NONTERM_exp 
    | 2 -> NONTERM_exp 
    | 3 -> NONTERM_exp 
    | 4 -> NONTERM_exp 
    | 5 -> NONTERM_exp 
    | 6 -> NONTERM_exp 
    | 7 -> NONTERM_exp 
    | 8 -> NONTERM_exp 
    | 9 -> NONTERM_exp 
    | 10 -> NONTERM_exp 
    | 11 -> NONTERM_exp 
    | 12 -> NONTERM_exp 
    | 13 -> NONTERM_exp 
    | 14 -> NONTERM_exp 
    | 15 -> NONTERM_exp 
    | 16 -> NONTERM_exp 
    | 17 -> NONTERM_exp 
    | 18 -> NONTERM_exp 
    | 19 -> NONTERM_exp 
    | 20 -> NONTERM_exp 
    | 21 -> NONTERM_exp 
    | 22 -> NONTERM_exp 
    | 23 -> NONTERM_exp 
    | 24 -> NONTERM_exp 
    | 25 -> NONTERM_ctype 
    | 26 -> NONTERM_ctype 
    | 27 -> NONTERM_ctype 
    | 28 -> NONTERM_ctype 
    | 29 -> NONTERM_ctypeid 
    | 30 -> NONTERM_ctypeid 
    | 31 -> NONTERM_ctypeid 
    | 32 -> NONTERM_ctypeid 
    | 33 -> NONTERM_ctypeid 
    | 34 -> NONTERM_ctypeid 
    | 35 -> NONTERM_stmts 
    | 36 -> NONTERM_stmts 
    | 37 -> NONTERM_stmts 
    | 38 -> NONTERM_stmt 
    | 39 -> NONTERM_stmt 
    | 40 -> NONTERM_stmt 
    | 41 -> NONTERM_stmt 
    | 42 -> NONTERM_stmt 
    | 43 -> NONTERM_stmt 
    | 44 -> NONTERM_stmt 
    | 45 -> NONTERM_stmt 
    | 46 -> NONTERM_elseopt 
    | 47 -> NONTERM_elseopt 
    | 48 -> NONTERM_args 
    | 49 -> NONTERM_args 
    | 50 -> NONTERM_args 
    | 51 -> NONTERM_func 
    | 52 -> NONTERM_prog 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 37 
let _fsyacc_tagOfErrorTerminal = 35

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | ID _ -> "ID" 
  | NUM _ -> "NUM" 
  | EOF  -> "EOF" 
  | AMP  -> "AMP" 
  | COMMA  -> "COMMA" 
  | SEMICOLON _ -> "SEMICOLON" 
  | RPAR _ -> "RPAR" 
  | LPAR  -> "LPAR" 
  | LBRA  -> "LBRA" 
  | RBRA  -> "RBRA" 
  | ASSIGN  -> "ASSIGN" 
  | LSQUA  -> "LSQUA" 
  | RSQUA  -> "RSQUA" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | STAR  -> "STAR" 
  | DIVIDE  -> "DIVIDE" 
  | EQUAL  -> "EQUAL" 
  | NOTEQ  -> "NOTEQ" 
  | LEQ  -> "LEQ" 
  | LESS  -> "LESS" 
  | GEQ  -> "GEQ" 
  | GREATER  -> "GREATER" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | NUL  -> "NUL" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | INT  -> "INT" 
  | BOOL  -> "BOOL" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | RETURN  -> "RETURN" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMICOLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RPAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAR  -> (null : System.Object) 
  | LBRA  -> (null : System.Object) 
  | RBRA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | LSQUA  -> (null : System.Object) 
  | RSQUA  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NOTEQ  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | NUL  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us;65535us;25us;65535us;11us;12us;14us;15us;16us;17us;40us;18us;41us;19us;42us;20us;43us;21us;44us;22us;45us;23us;46us;24us;47us;25us;48us;26us;49us;27us;50us;28us;51us;29us;52us;30us;53us;31us;79us;32us;82us;33us;86us;34us;88us;35us;90us;36us;92us;37us;95us;38us;102us;39us;1us;65535us;0us;114us;8us;65535us;73us;77us;75us;77us;97us;77us;104us;77us;108us;77us;112us;111us;116us;111us;119us;77us;6us;65535us;73us;74us;75us;76us;97us;98us;104us;105us;108us;109us;119us;120us;6us;65535us;73us;73us;75us;73us;97us;73us;104us;73us;108us;73us;119us;73us;1us;65535us;99us;100us;2us;65535us;112us;113us;116us;117us;1us;65535us;0us;122us;1us;65535us;0us;1us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;27us;29us;38us;45us;52us;54us;57us;59us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;2us;1us;3us;1us;4us;2us;5us;8us;1us;6us;1us;6us;1us;7us;1us;7us;1us;8us;13us;8us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;1us;8us;1us;9us;13us;9us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;1us;10us;13us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;13us;11us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;13us;11us;12us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;13us;11us;12us;13us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;13us;11us;12us;13us;14us;14us;15us;16us;17us;18us;19us;20us;21us;22us;13us;11us;12us;13us;14us;15us;15us;16us;17us;18us;19us;20us;21us;22us;13us;11us;12us;13us;14us;15us;16us;16us;17us;18us;19us;20us;21us;22us;13us;11us;12us;13us;14us;15us;16us;17us;17us;18us;19us;20us;21us;22us;13us;11us;12us;13us;14us;15us;16us;17us;18us;18us;19us;20us;21us;22us;13us;11us;12us;13us;14us;15us;16us;17us;18us;19us;19us;20us;21us;22us;13us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;20us;21us;22us;13us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;21us;22us;13us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;22us;13us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;23us;13us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;24us;13us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;39us;13us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;40us;13us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;41us;13us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;42us;13us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;42us;13us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;43us;13us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;44us;13us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;45us;1us;11us;1us;12us;1us;13us;1us;14us;1us;15us;1us;16us;1us;17us;1us;18us;1us;19us;1us;20us;1us;21us;1us;22us;1us;23us;1us;24us;1us;24us;2us;25us;26us;1us;26us;2us;27us;28us;1us;28us;3us;29us;30us;31us;2us;29us;31us;1us;30us;1us;30us;1us;31us;1us;31us;1us;31us;3us;32us;33us;34us;2us;32us;34us;1us;33us;1us;33us;1us;34us;1us;34us;1us;34us;1us;36us;1us;36us;1us;37us;1us;37us;2us;38us;39us;1us;38us;1us;39us;1us;39us;2us;40us;42us;1us;40us;1us;40us;1us;41us;1us;41us;1us;41us;1us;41us;1us;42us;1us;42us;1us;42us;1us;42us;1us;43us;1us;43us;1us;44us;1us;44us;1us;44us;1us;44us;1us;44us;1us;44us;1us;44us;1us;45us;1us;45us;1us;45us;1us;45us;1us;45us;1us;45us;1us;47us;1us;47us;1us;47us;1us;47us;2us;49us;50us;1us;50us;1us;50us;1us;51us;1us;51us;1us;51us;1us;51us;1us;51us;1us;51us;1us;51us;1us;51us;1us;52us;1us;52us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;15us;17us;19us;21us;23us;25us;39us;41us;43us;57us;59us;73us;87us;101us;115us;129us;143us;157us;171us;185us;199us;213us;227us;241us;255us;269us;283us;297us;311us;325us;339us;353us;367us;381us;383us;385us;387us;389us;391us;393us;395us;397us;399us;401us;403us;405us;407us;409us;411us;414us;416us;419us;421us;425us;428us;430us;432us;434us;436us;438us;442us;445us;447us;449us;451us;453us;455us;457us;459us;461us;463us;466us;468us;470us;472us;475us;477us;479us;481us;483us;485us;487us;489us;491us;493us;495us;497us;499us;501us;503us;505us;507us;509us;511us;513us;515us;517us;519us;521us;523us;525us;527us;529us;531us;533us;536us;538us;540us;542us;544us;546us;548us;550us;552us;554us;556us;558us;|]
let _fsyacc_action_rows = 124
let _fsyacc_actionTableElements = [|2us;32768us;29us;57us;30us;55us;0us;49152us;0us;16385us;0us;16386us;0us;16387us;0us;16388us;1us;16389us;11us;11us;1us;32768us;0us;8us;0us;16390us;1us;32768us;0us;10us;0us;16391us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;13us;32768us;12us;13us;13us;40us;14us;41us;15us;42us;16us;43us;17us;44us;18us;45us;19us;46us;20us;47us;21us;48us;22us;49us;23us;50us;24us;51us;0us;16392us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;2us;16393us;15us;42us;16us;43us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;2us;16394us;15us;42us;16us;43us;2us;16395us;15us;42us;16us;43us;2us;16396us;15us;42us;16us;43us;0us;16397us;0us;16398us;4us;16399us;13us;40us;14us;41us;15us;42us;16us;43us;4us;16400us;13us;40us;14us;41us;15us;42us;16us;43us;4us;16401us;13us;40us;14us;41us;15us;42us;16us;43us;4us;16402us;13us;40us;14us;41us;15us;42us;16us;43us;4us;16403us;13us;40us;14us;41us;15us;42us;16us;43us;4us;16404us;13us;40us;14us;41us;15us;42us;16us;43us;10us;16405us;13us;40us;14us;41us;15us;42us;16us;43us;17us;44us;18us;45us;19us;46us;20us;47us;21us;48us;22us;49us;11us;16406us;13us;40us;14us;41us;15us;42us;16us;43us;17us;44us;18us;45us;19us;46us;20us;47us;21us;48us;22us;49us;23us;50us;0us;16407us;13us;32768us;6us;54us;13us;40us;14us;41us;15us;42us;16us;43us;17us;44us;18us;45us;19us;46us;20us;47us;21us;48us;22us;49us;23us;50us;24us;51us;13us;32768us;5us;80us;13us;40us;14us;41us;15us;42us;16us;43us;17us;44us;18us;45us;19us;46us;20us;47us;21us;48us;22us;49us;23us;50us;24us;51us;13us;32768us;5us;83us;13us;40us;14us;41us;15us;42us;16us;43us;17us;44us;18us;45us;19us;46us;20us;47us;21us;48us;22us;49us;23us;50us;24us;51us;13us;32768us;5us;87us;13us;40us;14us;41us;15us;42us;16us;43us;17us;44us;18us;45us;19us;46us;20us;47us;21us;48us;22us;49us;23us;50us;24us;51us;13us;32768us;12us;89us;13us;40us;14us;41us;15us;42us;16us;43us;17us;44us;18us;45us;19us;46us;20us;47us;21us;48us;22us;49us;23us;50us;24us;51us;13us;32768us;5us;91us;13us;40us;14us;41us;15us;42us;16us;43us;17us;44us;18us;45us;19us;46us;20us;47us;21us;48us;22us;49us;23us;50us;24us;51us;13us;32768us;5us;93us;13us;40us;14us;41us;15us;42us;16us;43us;17us;44us;18us;45us;19us;46us;20us;47us;21us;48us;22us;49us;23us;50us;24us;51us;13us;32768us;6us;96us;13us;40us;14us;41us;15us;42us;16us;43us;17us;44us;18us;45us;19us;46us;20us;47us;21us;48us;22us;49us;23us;50us;24us;51us;13us;32768us;6us;103us;13us;40us;14us;41us;15us;42us;16us;43us;17us;44us;18us;45us;19us;46us;20us;47us;21us;48us;22us;49us;23us;50us;24us;51us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;0us;16408us;1us;16409us;15us;56us;0us;16410us;1us;16411us;15us;58us;0us;16412us;2us;32768us;0us;60us;15us;61us;1us;16413us;11us;63us;1us;32768us;0us;62us;0us;16414us;1us;32768us;1us;64us;1us;32768us;12us;65us;0us;16415us;2us;32768us;0us;67us;15us;68us;1us;16416us;11us;70us;1us;32768us;0us;69us;0us;16417us;1us;32768us;1us;71us;1us;32768us;12us;72us;0us;16418us;8us;16419us;0us;81us;5us;75us;15us;84us;29us;66us;30us;59us;31us;94us;33us;101us;34us;92us;0us;16420us;8us;16419us;0us;81us;5us;75us;15us;84us;29us;66us;30us;59us;31us;94us;33us;101us;34us;92us;0us;16421us;2us;32768us;5us;78us;10us;79us;0us;16422us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;0us;16423us;2us;32768us;10us;82us;11us;88us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;0us;16424us;1us;32768us;0us;85us;1us;32768us;10us;86us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;0us;16425us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;1us;32768us;10us;90us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;0us;16426us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;0us;16427us;1us;32768us;7us;95us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;1us;32768us;8us;97us;8us;16419us;0us;81us;5us;75us;15us;84us;29us;66us;30us;59us;31us;94us;33us;101us;34us;92us;1us;32768us;9us;99us;1us;16430us;32us;107us;0us;16428us;1us;32768us;7us;102us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;53us;13us;14us;14us;16us;15us;7us;25us;52us;26us;2us;27us;4us;28us;5us;1us;32768us;8us;104us;8us;16419us;0us;81us;5us;75us;15us;84us;29us;66us;30us;59us;31us;94us;33us;101us;34us;92us;1us;32768us;9us;106us;0us;16429us;1us;32768us;8us;108us;8us;16419us;0us;81us;5us;75us;15us;84us;29us;66us;30us;59us;31us;94us;33us;101us;34us;92us;1us;32768us;9us;110us;0us;16431us;1us;16433us;4us;112us;2us;16432us;29us;66us;30us;59us;0us;16434us;1us;32768us;0us;115us;1us;32768us;7us;116us;2us;16432us;29us;66us;30us;59us;1us;32768us;6us;118us;1us;32768us;8us;119us;8us;16419us;0us;81us;5us;75us;15us;84us;29us;66us;30us;59us;31us;94us;33us;101us;34us;92us;1us;32768us;9us;121us;0us;16435us;1us;32768us;2us;123us;0us;16436us;|]
let _fsyacc_actionTableRowOffsets = [|0us;3us;4us;5us;6us;7us;8us;10us;12us;13us;15us;16us;28us;42us;43us;55us;58us;70us;73us;76us;79us;80us;81us;86us;91us;96us;101us;106us;111us;122us;134us;135us;149us;163us;177us;191us;205us;219us;233us;247us;261us;273us;285us;297us;309us;321us;333us;345us;357us;369us;381us;393us;405us;417us;429us;430us;432us;433us;435us;436us;439us;441us;443us;444us;446us;448us;449us;452us;454us;456us;457us;459us;461us;462us;471us;472us;481us;482us;485us;486us;498us;499us;502us;514us;515us;517us;519us;531us;532us;544us;546us;558us;559us;571us;572us;574us;586us;588us;597us;599us;601us;602us;604us;616us;618us;627us;629us;630us;632us;641us;643us;644us;646us;649us;650us;652us;654us;657us;659us;661us;670us;672us;673us;675us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;1us;1us;1us;1us;2us;2us;4us;2us;2us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;2us;3us;1us;2us;1us;2us;2us;3us;5us;2us;3us;5us;0us;2us;2us;2us;4us;4us;5us;7us;3us;8us;7us;0us;4us;0us;1us;3us;8us;2us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;2us;2us;2us;2us;3us;3us;3us;3us;3us;3us;4us;4us;4us;5us;5us;5us;5us;5us;5us;5us;5us;6us;6us;7us;7us;7us;8us;9us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;16386us;16387us;16388us;65535us;65535us;16390us;65535us;16391us;65535us;65535us;16392us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16408us;65535us;16410us;65535us;16412us;65535us;65535us;65535us;16414us;65535us;65535us;16415us;65535us;65535us;65535us;16417us;65535us;65535us;16418us;65535us;16420us;65535us;16421us;65535us;16422us;65535us;16423us;65535us;65535us;16424us;65535us;65535us;65535us;16425us;65535us;65535us;65535us;16426us;65535us;16427us;65535us;65535us;65535us;65535us;65535us;65535us;16428us;65535us;65535us;65535us;65535us;65535us;16429us;65535us;65535us;65535us;16431us;65535us;65535us;16434us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16435us;65535us;16436us;|]
let _fsyacc_reductions = lazy [|
# 330 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Program in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprog));
# 339 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "src/Parser.fsy"
                                 AST.Null 
                   )
# 28 "src/Parser.fsy"
                 : 'gentype_exp));
# 349 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "src/Parser.fsy"
                                 AST.Num _1 
                   )
# 29 "src/Parser.fsy"
                 : 'gentype_exp));
# 360 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "src/Parser.fsy"
                                  AST.Boolean true 
                   )
# 30 "src/Parser.fsy"
                 : 'gentype_exp));
# 370 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "src/Parser.fsy"
                                   AST.Boolean false 
                   )
# 31 "src/Parser.fsy"
                 : 'gentype_exp));
# 380 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "src/Parser.fsy"
                                AST.Var _1 
                   )
# 32 "src/Parser.fsy"
                 : 'gentype_exp));
# 391 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "src/Parser.fsy"
                                     AST.Deref _2 
                   )
# 33 "src/Parser.fsy"
                 : 'gentype_exp));
# 402 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "src/Parser.fsy"
                                    AST.AddrOf _2 
                   )
# 34 "src/Parser.fsy"
                 : 'gentype_exp));
# 413 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "src/Parser.fsy"
                                                AST.Arr (_1, _3) 
                   )
# 35 "src/Parser.fsy"
                 : 'gentype_exp));
# 425 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "src/Parser.fsy"
                                      _2 
                   )
# 36 "src/Parser.fsy"
                 : 'gentype_exp));
# 436 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "src/Parser.fsy"
                                       AST.Neg _2 
                   )
# 37 "src/Parser.fsy"
                 : 'gentype_exp));
# 447 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "src/Parser.fsy"
                                          AST.Add (_1, _3) 
                   )
# 38 "src/Parser.fsy"
                 : 'gentype_exp));
# 459 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "src/Parser.fsy"
                                           AST.Sub (_1, _3) 
                   )
# 39 "src/Parser.fsy"
                 : 'gentype_exp));
# 471 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "src/Parser.fsy"
                                          AST.Mul (_1, _3) 
                   )
# 40 "src/Parser.fsy"
                 : 'gentype_exp));
# 483 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "src/Parser.fsy"
                                            AST.Div (_1, _3) 
                   )
# 41 "src/Parser.fsy"
                 : 'gentype_exp));
# 495 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "src/Parser.fsy"
                                           AST.Equal (_1, _3) 
                   )
# 42 "src/Parser.fsy"
                 : 'gentype_exp));
# 507 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "src/Parser.fsy"
                                           AST.NotEq (_1, _3) 
                   )
# 43 "src/Parser.fsy"
                 : 'gentype_exp));
# 519 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "src/Parser.fsy"
                                         AST.LessEq (_1, _3) 
                   )
# 44 "src/Parser.fsy"
                 : 'gentype_exp));
# 531 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "src/Parser.fsy"
                                          AST.LessThan (_1, _3) 
                   )
# 45 "src/Parser.fsy"
                 : 'gentype_exp));
# 543 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "src/Parser.fsy"
                                         AST.GreaterEq (_1, _3) 
                   )
# 46 "src/Parser.fsy"
                 : 'gentype_exp));
# 555 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "src/Parser.fsy"
                                             AST.GreaterThan (_1, _3) 
                   )
# 47 "src/Parser.fsy"
                 : 'gentype_exp));
# 567 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "src/Parser.fsy"
                                         AST.And (_1, _3) 
                   )
# 48 "src/Parser.fsy"
                 : 'gentype_exp));
# 579 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "src/Parser.fsy"
                                        AST.Or (_1, _3) 
                   )
# 49 "src/Parser.fsy"
                 : 'gentype_exp));
# 591 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "src/Parser.fsy"
                                     AST.Not _2 
                   )
# 50 "src/Parser.fsy"
                 : 'gentype_exp));
# 602 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "src/Parser.fsy"
                                           _2 
                   )
# 51 "src/Parser.fsy"
                 : 'gentype_exp));
# 614 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "src/Parser.fsy"
                                    (AST.CBool) 
                   )
# 53 "src/Parser.fsy"
                 : 'gentype_ctype));
# 624 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "src/Parser.fsy"
                                           AST.CBoolPtr 
                   )
# 54 "src/Parser.fsy"
                 : 'gentype_ctype));
# 634 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "src/Parser.fsy"
                                     AST.CInt 
                   )
# 55 "src/Parser.fsy"
                 : 'gentype_ctype));
# 644 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "src/Parser.fsy"
                                          AST.CIntPtr 
                   )
# 56 "src/Parser.fsy"
                 : 'gentype_ctype));
# 654 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "src/Parser.fsy"
                                         (AST.CBool, _2) 
                   )
# 58 "src/Parser.fsy"
                 : 'gentype_ctypeid));
# 665 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "src/Parser.fsy"
                                              (AST.CBoolPtr, _3) 
                   )
# 59 "src/Parser.fsy"
                 : 'gentype_ctypeid));
# 676 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "src/Parser.fsy"
                                                         (AST.CBoolArr _4, _2) 
                   )
# 60 "src/Parser.fsy"
                 : 'gentype_ctypeid));
# 688 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "src/Parser.fsy"
                                        (AST.CInt, _2) 
                   )
# 61 "src/Parser.fsy"
                 : 'gentype_ctypeid));
# 699 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "src/Parser.fsy"
                                             (AST.CIntPtr, _3) 
                   )
# 62 "src/Parser.fsy"
                 : 'gentype_ctypeid));
# 710 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "src/Parser.fsy"
                                                        (AST.CIntArr _4, _2) 
                   )
# 63 "src/Parser.fsy"
                 : 'gentype_ctypeid));
# 722 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "src/Parser.fsy"
                               [] 
                   )
# 65 "src/Parser.fsy"
                 : 'gentype_stmts));
# 732 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stmt in
            let _2 = parseState.GetInput(2) :?> 'gentype_stmts in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "src/Parser.fsy"
                                          _1 :: _2 
                   )
# 66 "src/Parser.fsy"
                 : 'gentype_stmts));
# 744 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            let _2 = parseState.GetInput(2) :?> 'gentype_stmts in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "src/Parser.fsy"
                                               _2 
                   )
# 67 "src/Parser.fsy"
                 : 'gentype_stmts));
# 756 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ctypeid in
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "src/Parser.fsy"
                                               AST.Declare (_2, fst _1, snd _1) 
                   )
# 69 "src/Parser.fsy"
                 : 'gentype_stmt));
# 768 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ctypeid in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            let _4 = parseState.GetInput(4) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "src/Parser.fsy"
                                                          AST.Define (_4, fst _1, snd _1, _3) 
                   )
# 70 "src/Parser.fsy"
                 : 'gentype_stmt));
# 781 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            let _4 = parseState.GetInput(4) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "src/Parser.fsy"
                                                     AST.Assign (_4, _1, _3) 
                   )
# 71 "src/Parser.fsy"
                 : 'gentype_stmt));
# 794 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_exp in
            let _5 = parseState.GetInput(5) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "src/Parser.fsy"
                                                          AST.PtrUpdate (_5, _2, _4) 
                   )
# 72 "src/Parser.fsy"
                 : 'gentype_stmt));
# 807 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            let _6 = parseState.GetInput(6) :?> 'gentype_exp in
            let _7 = parseState.GetInput(7) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "src/Parser.fsy"
                                                                     AST.ArrUpdate (_7, _1, _3, _6) 
                   )
# 73 "src/Parser.fsy"
                 : 'gentype_stmt));
# 821 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "src/Parser.fsy"
                                                  AST.Return (_3, _2) 
                   )
# 74 "src/Parser.fsy"
                 : 'gentype_stmt));
# 833 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            let _4 = parseState.GetInput(4) :?> int in
            let _6 = parseState.GetInput(6) :?> 'gentype_stmts in
            let _8 = parseState.GetInput(8) :?> 'gentype_elseopt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "src/Parser.fsy"
                                                                      AST.If (_4, _3, _6, _8) 
                   )
# 75 "src/Parser.fsy"
                 : 'gentype_stmt));
# 847 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            let _4 = parseState.GetInput(4) :?> int in
            let _6 = parseState.GetInput(6) :?> 'gentype_stmts in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "src/Parser.fsy"
                                                                 AST.While (_4, _3, _6) 
                   )
# 76 "src/Parser.fsy"
                 : 'gentype_stmt));
# 860 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "src/Parser.fsy"
                                 [] 
                   )
# 78 "src/Parser.fsy"
                 : 'gentype_elseopt));
# 870 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_stmts in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "src/Parser.fsy"
                                                      _3 
                   )
# 79 "src/Parser.fsy"
                 : 'gentype_elseopt));
# 881 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "src/Parser.fsy"
                             [] 
                   )
# 81 "src/Parser.fsy"
                 : 'gentype_args));
# 891 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ctypeid in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "src/Parser.fsy"
                                     [_1] 
                   )
# 82 "src/Parser.fsy"
                 : 'gentype_args));
# 902 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ctypeid in
            let _3 = parseState.GetInput(3) :?> 'gentype_args in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "src/Parser.fsy"
                                                _1 :: _3 
                   )
# 83 "src/Parser.fsy"
                 : 'gentype_args));
# 914 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ctype in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_args in
            let _5 = parseState.GetInput(5) :?> int in
            let _7 = parseState.GetInput(7) :?> 'gentype_stmts in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "src/Parser.fsy"
                                                                     (_1, _2, _4, _7) 
                   )
# 85 "src/Parser.fsy"
                 : 'gentype_func));
# 929 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_func in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "src/Parser.fsy"
                                      _1 
                   )
# 87 "src/Parser.fsy"
                 : AST.Program));
|]
# 941 "src/Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 38;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let prog lexer lexbuf : AST.Program =
    engine lexer lexbuf 0 :?> _
