{
module Lexer

open FSharp.Text.Lexing
open Parser

let lexeme = LexBuffer<_>.LexemeString
let moveline (lbuf: LexBuffer<_>) = lbuf.EndPos <- lbuf.EndPos.NextLine
let keywordMap =
  Map.empty
  |> Map.add "NULL" NUL
  |> Map.add "null" NUL
  |> Map.add "true" TRUE
  |> Map.add "false" FALSE
  |> Map.add "int" INT
  |> Map.add "bool" BOOL
  |> Map.add "if" IF
  |> Map.add "else" ELSE
  |> Map.add "while" WHILE
  |> Map.add "return" RETURN
let line = ref 1
}

let digit = ['0'-'9']
let alpha = ['A'-'Z' 'a'-'z']
let blank = [' ' '\t' '\r']
let newline = ('\n' | '\r' '\n')

rule token = parse
  | "+"       { PLUS }
  | "-"       { MINUS }
  | "*"       { STAR }
  | "/"       { DIVIDE }
  | "=="      { EQUAL }
  | "!="      { NOTEQ }
  | "<="      { LEQ }
  | "<"       { LESS }
  | ">="      { GEQ }
  | ">"       { GREATER }
  | "&&"      { AND }
  | "||"      { OR }
  | "!"       { NOT }
  | "("       { LPAR }
  | ")"       { RPAR !line }
  | "{"       { LBRA }
  | "}"       { RBRA }
  | "["       { LSQUA }
  | "]"       { RSQUA }
  | "="       { ASSIGN }
  | ";"       { SEMICOLON !line }
  | "&"       { AMP }
  | ","       { COMMA }
  | eof       { EOF }
  | blank+    { token lexbuf }
  | newline   { line := !line + 1; moveline lexbuf; token lexbuf }
  | digit+    { NUM (int (lexeme lexbuf)) }
  | (alpha|'_')(alpha|digit|'_')* { let s = lexeme lexbuf
                                    match Map.tryFind s keywordMap with
                                    | Some kwd -> kwd
                                    | None -> ID (lexeme lexbuf) }
  | _ { printfn "Invalid token '%s'" (lexeme lexbuf); exit 1 }
