// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "src/Parser.fsy"



# 10 "src/Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | ID of (string)
  | NUM of (int)
  | EOF
  | AMP
  | COMMA
  | SEMICOLON of (int)
  | RPAR of (int)
  | LPAR
  | LBRA
  | RBRA
  | ASSIGN
  | PLUS
  | MINUS
  | STAR
  | DIVIDE
  | EQUAL
  | NOTEQ
  | LEQ
  | LESS
  | GEQ
  | GREATER
  | AND
  | OR
  | NOT
  | NUL
  | TRUE
  | FALSE
  | INT
  | BOOL
  | IF
  | ELSE
  | WHILE
  | RETURN
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_ID
    | TOKEN_NUM
    | TOKEN_EOF
    | TOKEN_AMP
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_RPAR
    | TOKEN_LPAR
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_ASSIGN
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_DIVIDE
    | TOKEN_EQUAL
    | TOKEN_NOTEQ
    | TOKEN_LEQ
    | TOKEN_LESS
    | TOKEN_GEQ
    | TOKEN_GREATER
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_NUL
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_INT
    | TOKEN_BOOL
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_RETURN
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_exp
    | NONTERM_ctype
    | NONTERM_stmts
    | NONTERM_stmt
    | NONTERM_elseopt
    | NONTERM_args
    | NONTERM_func
    | NONTERM_prog

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | ID _ -> 0 
  | NUM _ -> 1 
  | EOF  -> 2 
  | AMP  -> 3 
  | COMMA  -> 4 
  | SEMICOLON _ -> 5 
  | RPAR _ -> 6 
  | LPAR  -> 7 
  | LBRA  -> 8 
  | RBRA  -> 9 
  | ASSIGN  -> 10 
  | PLUS  -> 11 
  | MINUS  -> 12 
  | STAR  -> 13 
  | DIVIDE  -> 14 
  | EQUAL  -> 15 
  | NOTEQ  -> 16 
  | LEQ  -> 17 
  | LESS  -> 18 
  | GEQ  -> 19 
  | GREATER  -> 20 
  | AND  -> 21 
  | OR  -> 22 
  | NOT  -> 23 
  | NUL  -> 24 
  | TRUE  -> 25 
  | FALSE  -> 26 
  | INT  -> 27 
  | BOOL  -> 28 
  | IF  -> 29 
  | ELSE  -> 30 
  | WHILE  -> 31 
  | RETURN  -> 32 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_ID 
  | 1 -> TOKEN_NUM 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_AMP 
  | 4 -> TOKEN_COMMA 
  | 5 -> TOKEN_SEMICOLON 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_LPAR 
  | 8 -> TOKEN_LBRA 
  | 9 -> TOKEN_RBRA 
  | 10 -> TOKEN_ASSIGN 
  | 11 -> TOKEN_PLUS 
  | 12 -> TOKEN_MINUS 
  | 13 -> TOKEN_STAR 
  | 14 -> TOKEN_DIVIDE 
  | 15 -> TOKEN_EQUAL 
  | 16 -> TOKEN_NOTEQ 
  | 17 -> TOKEN_LEQ 
  | 18 -> TOKEN_LESS 
  | 19 -> TOKEN_GEQ 
  | 20 -> TOKEN_GREATER 
  | 21 -> TOKEN_AND 
  | 22 -> TOKEN_OR 
  | 23 -> TOKEN_NOT 
  | 24 -> TOKEN_NUL 
  | 25 -> TOKEN_TRUE 
  | 26 -> TOKEN_FALSE 
  | 27 -> TOKEN_INT 
  | 28 -> TOKEN_BOOL 
  | 29 -> TOKEN_IF 
  | 30 -> TOKEN_ELSE 
  | 31 -> TOKEN_WHILE 
  | 32 -> TOKEN_RETURN 
  | 35 -> TOKEN_end_of_input
  | 33 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprog 
    | 1 -> NONTERM_exp 
    | 2 -> NONTERM_exp 
    | 3 -> NONTERM_exp 
    | 4 -> NONTERM_exp 
    | 5 -> NONTERM_exp 
    | 6 -> NONTERM_exp 
    | 7 -> NONTERM_exp 
    | 8 -> NONTERM_exp 
    | 9 -> NONTERM_exp 
    | 10 -> NONTERM_exp 
    | 11 -> NONTERM_exp 
    | 12 -> NONTERM_exp 
    | 13 -> NONTERM_exp 
    | 14 -> NONTERM_exp 
    | 15 -> NONTERM_exp 
    | 16 -> NONTERM_exp 
    | 17 -> NONTERM_exp 
    | 18 -> NONTERM_exp 
    | 19 -> NONTERM_exp 
    | 20 -> NONTERM_exp 
    | 21 -> NONTERM_exp 
    | 22 -> NONTERM_exp 
    | 23 -> NONTERM_exp 
    | 24 -> NONTERM_ctype 
    | 25 -> NONTERM_ctype 
    | 26 -> NONTERM_ctype 
    | 27 -> NONTERM_ctype 
    | 28 -> NONTERM_stmts 
    | 29 -> NONTERM_stmts 
    | 30 -> NONTERM_stmts 
    | 31 -> NONTERM_stmt 
    | 32 -> NONTERM_stmt 
    | 33 -> NONTERM_stmt 
    | 34 -> NONTERM_stmt 
    | 35 -> NONTERM_stmt 
    | 36 -> NONTERM_stmt 
    | 37 -> NONTERM_stmt 
    | 38 -> NONTERM_elseopt 
    | 39 -> NONTERM_elseopt 
    | 40 -> NONTERM_args 
    | 41 -> NONTERM_args 
    | 42 -> NONTERM_args 
    | 43 -> NONTERM_func 
    | 44 -> NONTERM_prog 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 35 
let _fsyacc_tagOfErrorTerminal = 33

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | ID _ -> "ID" 
  | NUM _ -> "NUM" 
  | EOF  -> "EOF" 
  | AMP  -> "AMP" 
  | COMMA  -> "COMMA" 
  | SEMICOLON _ -> "SEMICOLON" 
  | RPAR _ -> "RPAR" 
  | LPAR  -> "LPAR" 
  | LBRA  -> "LBRA" 
  | RBRA  -> "RBRA" 
  | ASSIGN  -> "ASSIGN" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | STAR  -> "STAR" 
  | DIVIDE  -> "DIVIDE" 
  | EQUAL  -> "EQUAL" 
  | NOTEQ  -> "NOTEQ" 
  | LEQ  -> "LEQ" 
  | LESS  -> "LESS" 
  | GEQ  -> "GEQ" 
  | GREATER  -> "GREATER" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | NUL  -> "NUL" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | INT  -> "INT" 
  | BOOL  -> "BOOL" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | RETURN  -> "RETURN" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMICOLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RPAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAR  -> (null : System.Object) 
  | LBRA  -> (null : System.Object) 
  | RBRA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NOTEQ  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | NUL  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us;65535us;22us;65535us;11us;12us;13us;14us;35us;15us;36us;16us;37us;17us;38us;18us;39us;19us;40us;20us;41us;21us;42us;22us;43us;23us;44us;24us;45us;25us;46us;26us;47us;27us;48us;28us;61us;29us;64us;30us;68us;31us;70us;32us;73us;33us;80us;34us;9us;65535us;0us;93us;54us;58us;56us;58us;75us;58us;82us;58us;86us;58us;91us;89us;95us;89us;98us;58us;6us;65535us;54us;55us;56us;57us;75us;76us;82us;83us;86us;87us;98us;99us;6us;65535us;54us;54us;56us;54us;75us;54us;82us;54us;86us;54us;98us;54us;1us;65535us;77us;78us;2us;65535us;91us;92us;95us;96us;1us;65535us;0us;101us;1us;65535us;0us;1us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;24us;34us;41us;48us;50us;53us;55us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;2us;1us;3us;1us;4us;1us;5us;1us;6us;1us;6us;1us;7us;1us;7us;1us;8us;13us;8us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;1us;9us;13us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;13us;10us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;13us;10us;11us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;13us;10us;11us;12us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;13us;10us;11us;12us;13us;13us;14us;15us;16us;17us;18us;19us;20us;21us;13us;10us;11us;12us;13us;14us;14us;15us;16us;17us;18us;19us;20us;21us;13us;10us;11us;12us;13us;14us;15us;15us;16us;17us;18us;19us;20us;21us;13us;10us;11us;12us;13us;14us;15us;16us;16us;17us;18us;19us;20us;21us;13us;10us;11us;12us;13us;14us;15us;16us;17us;17us;18us;19us;20us;21us;13us;10us;11us;12us;13us;14us;15us;16us;17us;18us;18us;19us;20us;21us;13us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;19us;20us;21us;13us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;20us;21us;13us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;21us;13us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;13us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;23us;13us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;32us;13us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;33us;13us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;34us;13us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;35us;13us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;36us;13us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;37us;1us;10us;1us;11us;1us;12us;1us;13us;1us;14us;1us;15us;1us;16us;1us;17us;1us;18us;1us;19us;1us;20us;1us;21us;1us;22us;1us;23us;1us;23us;2us;24us;25us;1us;25us;2us;26us;27us;1us;27us;1us;29us;1us;29us;1us;30us;1us;30us;2us;31us;32us;2us;31us;32us;1us;31us;1us;32us;1us;32us;1us;33us;1us;33us;1us;33us;1us;34us;1us;34us;1us;34us;1us;34us;1us;35us;1us;35us;1us;36us;1us;36us;1us;36us;1us;36us;1us;36us;1us;36us;1us;36us;1us;37us;1us;37us;1us;37us;1us;37us;1us;37us;1us;37us;1us;39us;1us;39us;1us;39us;1us;39us;2us;41us;42us;2us;41us;42us;1us;42us;1us;42us;1us;43us;1us;43us;1us;43us;1us;43us;1us;43us;1us;43us;1us;43us;1us;43us;1us;44us;1us;44us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;22us;24us;38us;40us;54us;68us;82us;96us;110us;124us;138us;152us;166us;180us;194us;208us;222us;236us;250us;264us;278us;292us;306us;320us;334us;336us;338us;340us;342us;344us;346us;348us;350us;352us;354us;356us;358us;360us;362us;364us;367us;369us;372us;374us;376us;378us;380us;382us;385us;388us;390us;392us;394us;396us;398us;400us;402us;404us;406us;408us;410us;412us;414us;416us;418us;420us;422us;424us;426us;428us;430us;432us;434us;436us;438us;440us;442us;444us;446us;449us;452us;454us;456us;458us;460us;462us;464us;466us;468us;470us;472us;474us;|]
let _fsyacc_action_rows = 103
let _fsyacc_actionTableElements = [|2us;32768us;27us;52us;28us;50us;0us;49152us;0us;16385us;0us;16386us;0us;16387us;0us;16388us;0us;16389us;1us;32768us;0us;8us;0us;16390us;1us;32768us;0us;10us;0us;16391us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;2us;16392us;13us;37us;14us;38us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;2us;16393us;13us;37us;14us;38us;2us;16394us;13us;37us;14us;38us;2us;16395us;13us;37us;14us;38us;0us;16396us;0us;16397us;4us;16398us;11us;35us;12us;36us;13us;37us;14us;38us;4us;16399us;11us;35us;12us;36us;13us;37us;14us;38us;4us;16400us;11us;35us;12us;36us;13us;37us;14us;38us;4us;16401us;11us;35us;12us;36us;13us;37us;14us;38us;4us;16402us;11us;35us;12us;36us;13us;37us;14us;38us;4us;16403us;11us;35us;12us;36us;13us;37us;14us;38us;10us;16404us;11us;35us;12us;36us;13us;37us;14us;38us;15us;39us;16us;40us;17us;41us;18us;42us;19us;43us;20us;44us;11us;16405us;11us;35us;12us;36us;13us;37us;14us;38us;15us;39us;16us;40us;17us;41us;18us;42us;19us;43us;20us;44us;21us;45us;0us;16406us;13us;32768us;6us;49us;11us;35us;12us;36us;13us;37us;14us;38us;15us;39us;16us;40us;17us;41us;18us;42us;19us;43us;20us;44us;21us;45us;22us;46us;13us;32768us;5us;62us;11us;35us;12us;36us;13us;37us;14us;38us;15us;39us;16us;40us;17us;41us;18us;42us;19us;43us;20us;44us;21us;45us;22us;46us;13us;32768us;5us;65us;11us;35us;12us;36us;13us;37us;14us;38us;15us;39us;16us;40us;17us;41us;18us;42us;19us;43us;20us;44us;21us;45us;22us;46us;13us;32768us;5us;69us;11us;35us;12us;36us;13us;37us;14us;38us;15us;39us;16us;40us;17us;41us;18us;42us;19us;43us;20us;44us;21us;45us;22us;46us;13us;32768us;5us;71us;11us;35us;12us;36us;13us;37us;14us;38us;15us;39us;16us;40us;17us;41us;18us;42us;19us;43us;20us;44us;21us;45us;22us;46us;13us;32768us;6us;74us;11us;35us;12us;36us;13us;37us;14us;38us;15us;39us;16us;40us;17us;41us;18us;42us;19us;43us;20us;44us;21us;45us;22us;46us;13us;32768us;6us;81us;11us;35us;12us;36us;13us;37us;14us;38us;15us;39us;16us;40us;17us;41us;18us;42us;19us;43us;20us;44us;21us;45us;22us;46us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;0us;16407us;1us;16408us;13us;51us;0us;16409us;1us;16410us;13us;53us;0us;16411us;8us;16412us;0us;63us;5us;56us;13us;66us;27us;52us;28us;50us;29us;72us;31us;79us;32us;70us;0us;16413us;8us;16412us;0us;63us;5us;56us;13us;66us;27us;52us;28us;50us;29us;72us;31us;79us;32us;70us;0us;16414us;1us;32768us;0us;59us;2us;32768us;5us;60us;10us;61us;0us;16415us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;0us;16416us;1us;32768us;10us;64us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;0us;16417us;1us;32768us;0us;67us;1us;32768us;10us;68us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;0us;16418us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;0us;16419us;1us;32768us;7us;73us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;1us;32768us;8us;75us;8us;16412us;0us;63us;5us;56us;13us;66us;27us;52us;28us;50us;29us;72us;31us;79us;32us;70us;1us;32768us;9us;77us;1us;16422us;30us;85us;0us;16420us;1us;32768us;7us;80us;11us;32768us;0us;6us;1us;3us;3us;9us;7us;48us;11us;11us;12us;13us;13us;7us;23us;47us;24us;2us;25us;4us;26us;5us;1us;32768us;8us;82us;8us;16412us;0us;63us;5us;56us;13us;66us;27us;52us;28us;50us;29us;72us;31us;79us;32us;70us;1us;32768us;9us;84us;0us;16421us;1us;32768us;8us;86us;8us;16412us;0us;63us;5us;56us;13us;66us;27us;52us;28us;50us;29us;72us;31us;79us;32us;70us;1us;32768us;9us;88us;0us;16423us;1us;32768us;0us;90us;1us;16425us;4us;91us;2us;16424us;27us;52us;28us;50us;0us;16426us;1us;32768us;0us;94us;1us;32768us;7us;95us;2us;16424us;27us;52us;28us;50us;1us;32768us;6us;97us;1us;32768us;8us;98us;8us;16412us;0us;63us;5us;56us;13us;66us;27us;52us;28us;50us;29us;72us;31us;79us;32us;70us;1us;32768us;9us;100us;0us;16427us;1us;32768us;2us;102us;0us;16428us;|]
let _fsyacc_actionTableRowOffsets = [|0us;3us;4us;5us;6us;7us;8us;9us;11us;12us;14us;15us;27us;30us;42us;45us;48us;51us;52us;53us;58us;63us;68us;73us;78us;83us;94us;106us;107us;121us;135us;149us;163us;177us;191us;205us;217us;229us;241us;253us;265us;277us;289us;301us;313us;325us;337us;349us;361us;373us;374us;376us;377us;379us;380us;389us;390us;399us;400us;402us;405us;406us;418us;419us;421us;433us;434us;436us;438us;450us;451us;463us;464us;466us;478us;480us;489us;491us;493us;494us;496us;508us;510us;519us;521us;522us;524us;533us;535us;536us;538us;540us;543us;544us;546us;548us;551us;553us;555us;564us;566us;567us;569us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;1us;1us;1us;1us;2us;2us;2us;2us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;2us;3us;1us;2us;1us;2us;0us;2us;2us;3us;5us;4us;5us;3us;8us;7us;0us;4us;0us;2us;4us;8us;2us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;2us;2us;2us;2us;3us;3us;3us;4us;4us;4us;4us;4us;4us;4us;5us;5us;6us;6us;6us;7us;8us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;16386us;16387us;16388us;16389us;65535us;16390us;65535us;16391us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16407us;65535us;16409us;65535us;16411us;65535us;16413us;65535us;16414us;65535us;65535us;16415us;65535us;16416us;65535us;65535us;16417us;65535us;65535us;65535us;16418us;65535us;16419us;65535us;65535us;65535us;65535us;65535us;65535us;16420us;65535us;65535us;65535us;65535us;65535us;16421us;65535us;65535us;65535us;16423us;65535us;65535us;65535us;16426us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16427us;65535us;16428us;|]
let _fsyacc_reductions = lazy [|
# 309 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Program in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprog));
# 318 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "src/Parser.fsy"
                                 AST.Null 
                   )
# 28 "src/Parser.fsy"
                 : 'gentype_exp));
# 328 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "src/Parser.fsy"
                                 AST.Num _1 
                   )
# 29 "src/Parser.fsy"
                 : 'gentype_exp));
# 339 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "src/Parser.fsy"
                                  AST.Boolean true 
                   )
# 30 "src/Parser.fsy"
                 : 'gentype_exp));
# 349 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "src/Parser.fsy"
                                   AST.Boolean false 
                   )
# 31 "src/Parser.fsy"
                 : 'gentype_exp));
# 359 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "src/Parser.fsy"
                                AST.Var _1 
                   )
# 32 "src/Parser.fsy"
                 : 'gentype_exp));
# 370 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "src/Parser.fsy"
                                     AST.Deref _2 
                   )
# 33 "src/Parser.fsy"
                 : 'gentype_exp));
# 381 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "src/Parser.fsy"
                                    AST.AddrOf _2 
                   )
# 34 "src/Parser.fsy"
                 : 'gentype_exp));
# 392 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "src/Parser.fsy"
                                      _2 
                   )
# 35 "src/Parser.fsy"
                 : 'gentype_exp));
# 403 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "src/Parser.fsy"
                                       AST.Neg _2 
                   )
# 36 "src/Parser.fsy"
                 : 'gentype_exp));
# 414 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "src/Parser.fsy"
                                          AST.Add (_1, _3) 
                   )
# 37 "src/Parser.fsy"
                 : 'gentype_exp));
# 426 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "src/Parser.fsy"
                                           AST.Sub (_1, _3) 
                   )
# 38 "src/Parser.fsy"
                 : 'gentype_exp));
# 438 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "src/Parser.fsy"
                                          AST.Mul (_1, _3) 
                   )
# 39 "src/Parser.fsy"
                 : 'gentype_exp));
# 450 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "src/Parser.fsy"
                                            AST.Div (_1, _3) 
                   )
# 40 "src/Parser.fsy"
                 : 'gentype_exp));
# 462 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "src/Parser.fsy"
                                           AST.Equal (_1, _3) 
                   )
# 41 "src/Parser.fsy"
                 : 'gentype_exp));
# 474 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "src/Parser.fsy"
                                           AST.NotEq (_1, _3) 
                   )
# 42 "src/Parser.fsy"
                 : 'gentype_exp));
# 486 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "src/Parser.fsy"
                                         AST.LessEq (_1, _3) 
                   )
# 43 "src/Parser.fsy"
                 : 'gentype_exp));
# 498 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "src/Parser.fsy"
                                          AST.LessThan (_1, _3) 
                   )
# 44 "src/Parser.fsy"
                 : 'gentype_exp));
# 510 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "src/Parser.fsy"
                                         AST.GreaterEq (_1, _3) 
                   )
# 45 "src/Parser.fsy"
                 : 'gentype_exp));
# 522 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "src/Parser.fsy"
                                             AST.GreaterThan (_1, _3) 
                   )
# 46 "src/Parser.fsy"
                 : 'gentype_exp));
# 534 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "src/Parser.fsy"
                                         AST.And (_1, _3) 
                   )
# 47 "src/Parser.fsy"
                 : 'gentype_exp));
# 546 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "src/Parser.fsy"
                                        AST.Or (_1, _3) 
                   )
# 48 "src/Parser.fsy"
                 : 'gentype_exp));
# 558 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "src/Parser.fsy"
                                     AST.Not _2 
                   )
# 49 "src/Parser.fsy"
                 : 'gentype_exp));
# 569 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "src/Parser.fsy"
                                           _2 
                   )
# 50 "src/Parser.fsy"
                 : 'gentype_exp));
# 581 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "src/Parser.fsy"
                                    AST.CBool 
                   )
# 52 "src/Parser.fsy"
                 : 'gentype_ctype));
# 591 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "src/Parser.fsy"
                                         AST.CBoolPtr 
                   )
# 53 "src/Parser.fsy"
                 : 'gentype_ctype));
# 601 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "src/Parser.fsy"
                                   AST.CInt 
                   )
# 54 "src/Parser.fsy"
                 : 'gentype_ctype));
# 611 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "src/Parser.fsy"
                                        AST.CIntPtr 
                   )
# 55 "src/Parser.fsy"
                 : 'gentype_ctype));
# 621 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "src/Parser.fsy"
                               [] 
                   )
# 57 "src/Parser.fsy"
                 : 'gentype_stmts));
# 631 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stmt in
            let _2 = parseState.GetInput(2) :?> 'gentype_stmts in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "src/Parser.fsy"
                                          _1 :: _2 
                   )
# 58 "src/Parser.fsy"
                 : 'gentype_stmts));
# 643 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            let _2 = parseState.GetInput(2) :?> 'gentype_stmts in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "src/Parser.fsy"
                                               _2 
                   )
# 59 "src/Parser.fsy"
                 : 'gentype_stmts));
# 655 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ctype in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "src/Parser.fsy"
                                                AST.Declare (_3, _1, _2) 
                   )
# 61 "src/Parser.fsy"
                 : 'gentype_stmt));
# 668 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ctype in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_exp in
            let _5 = parseState.GetInput(5) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "src/Parser.fsy"
                                                           AST.Define (_5, _1, _2, _4) 
                   )
# 62 "src/Parser.fsy"
                 : 'gentype_stmt));
# 682 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            let _4 = parseState.GetInput(4) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "src/Parser.fsy"
                                                     AST.Assign (_4, _1, _3) 
                   )
# 63 "src/Parser.fsy"
                 : 'gentype_stmt));
# 695 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_exp in
            let _5 = parseState.GetInput(5) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "src/Parser.fsy"
                                                          AST.PtrUpdate (_5, _2, _4) 
                   )
# 64 "src/Parser.fsy"
                 : 'gentype_stmt));
# 708 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "src/Parser.fsy"
                                                  AST.Return (_3, _2) 
                   )
# 65 "src/Parser.fsy"
                 : 'gentype_stmt));
# 720 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            let _4 = parseState.GetInput(4) :?> int in
            let _6 = parseState.GetInput(6) :?> 'gentype_stmts in
            let _8 = parseState.GetInput(8) :?> 'gentype_elseopt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "src/Parser.fsy"
                                                                      AST.If (_4, _3, _6, _8) 
                   )
# 66 "src/Parser.fsy"
                 : 'gentype_stmt));
# 734 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            let _4 = parseState.GetInput(4) :?> int in
            let _6 = parseState.GetInput(6) :?> 'gentype_stmts in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "src/Parser.fsy"
                                                                 AST.While (_4, _3, _6) 
                   )
# 67 "src/Parser.fsy"
                 : 'gentype_stmt));
# 747 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "src/Parser.fsy"
                                 [] 
                   )
# 69 "src/Parser.fsy"
                 : 'gentype_elseopt));
# 757 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_stmts in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "src/Parser.fsy"
                                                      _3 
                   )
# 70 "src/Parser.fsy"
                 : 'gentype_elseopt));
# 768 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "src/Parser.fsy"
                             [] 
                   )
# 72 "src/Parser.fsy"
                 : 'gentype_args));
# 778 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ctype in
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "src/Parser.fsy"
                                      [(_1, _2)] 
                   )
# 73 "src/Parser.fsy"
                 : 'gentype_args));
# 790 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ctype in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_args in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "src/Parser.fsy"
                                                 (_1, _2) :: _4 
                   )
# 74 "src/Parser.fsy"
                 : 'gentype_args));
# 803 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ctype in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_args in
            let _5 = parseState.GetInput(5) :?> int in
            let _7 = parseState.GetInput(7) :?> 'gentype_stmts in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "src/Parser.fsy"
                                                                     (_1, _2, _4, _7) 
                   )
# 76 "src/Parser.fsy"
                 : 'gentype_func));
# 818 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_func in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "src/Parser.fsy"
                                      _1 
                   )
# 78 "src/Parser.fsy"
                 : AST.Program));
|]
# 830 "src/Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 36;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let prog lexer lexbuf : AST.Program =
    engine lexer lexbuf 0 :?> _
